devtools::install_github("hadley/lazyeval")
devtools::install_github("jannes-m/RQGIS")
devtools::install_github("jannes-m/RQGIS")
devtools::install_github("jannes-m/RQGIS")
devtools::install_github("jannes-m/RQGIS")
library("raster")
library("rgdal")
dir_tmp <- tempdir()
dir_tmp
ger <- getData(name="GADM", country= "DEU", level=1)
dir_tmp
writeOGR(ger, dir_tmp, "ger", driver="ESRI Shapefile", overwrite_layer = TRUE)
library("RQGIS")
my_env <- set_env()
my_env <- set_env("C:/OSGeo4W64")
my_env
find_algorithms(search_term = "polygon centroid",
qgis_env = my_env)
find_algorithms(search_term = "polygon centroid",
qgis_env = my_env)
get_usage(alg = "qgis:polygoncentroids",
qgis_env = my_env,
intern = TRUE)
my_env <- set_env("C:/Program Files (x86)/QGIS Lyon")
my_env
find_algorithms(search_term = "polygon centroid",
qgis_env = my_env)
find_algorithms(search_term = "polygon centroid",qgis_env = my_env)
my_env
my_env <- set_env("C://Program Files (x86)//QGIS Lyon")
my_env
my_env <- set_env("C:\Program Files (x86)\QGIS Lyon")
my_env <- set_env("C:\\Program Files (x86)\\QGIS Lyon")
my_env
find_algorithms(search_term = "polygon centroid",qgis_env = my_env)
my_env <- set_env("C:/Program Files (x86)/QGIS Lyon")
find_algorithms(search_term = "polygon centroid",qgis_env = my_env)
?Encoding
Sys.getlocale
find_algorithms(search_term = "polygon centroid",qgis_env = my_env)
find_algorithms(search_term = "polygon centroid",qgis_env = my_env)
library("RQGIS")
find_algorithms(search_term = "polygon centroid",qgis_env = my_env)
find_algorithms(search_term = "polygon",qgis_env = my_env)
find_algorithms(search_term = "polygon",qgis_env = my_env)
library("RQGIS")
find_algorithms(search_term = "polygon",qgis_env = my_env)
if (packageVersion("devtools") < 1.6) {
install.packages("devtools")
}
if (!"lazyeval" %in% installed.packages()[, "Package"]) {
devtools::install_github("hadley/lazyeval")
}
devtools::install_github("jannes-m/RQGIS")
library("RQGIS")
my_env <- set_env(C:/Program Files/QGIS Essen"")
my_env <- set_env("C:/Program Files/QGIS Essen")
my_env
find_algorithms(search_term = "polygon centroid",
qgis_env = my_env)
find_algorithms(search_term = "polygon centroid",
qgis_env = my_env)
find_algorithms(search_term = "polygon centroid",
qgis_env = my_env)
find_algorithms(search_term = "geoprocessing",
qgis_env = my_env)
my_env <- set_env("C:/OSGeo4W64")
library(RQGIS)
find_algorithms(search_term = "geoprocessing",
qgis_env = my_env)
my_env <- set_env("C:/Program Files/QGIS Essen")
library(RQGIS)
find_algorithms(search_term = "geoprocessing",
qgis_env = my_env)
find_algorithms(search_term = "geoprocessing",
qgis_env = my_env)
find_algorithms(search_term = "geoprocessing",
qgis_env = my_env)
find_algorithms(search_term = "geoprocessing",
qgis_env = my_env)
library(RQGIS)
find_algorithms(search_term = "polygon centroid",
qgis_env = my_env)
library(RQGIS)
library(RQGIS)
my_env <- set_env("C:/Program Files (x86)/QGIS Dufour")
my_env
find_algorithms(search_term = "polygon centroid",
qgis_env = my_env)
my_env <- set_env("C:/Program Files (x86)/QGIS Lyon")
find_algorithms(search_term = "polygon centroid",
qgis_env = my_env)
find_algorithms(search_term = "polygon centroid",
qgis_env = my_env)
library(RQGIS)
my_env <- set_env("C:/Program Files (x86)/QGIS Lyon")
find_algorithms(search_term = "polygon centroid",
qgis_env = my_env)
get_usage(alg = "qgis:polygoncentroids",
qgis_env = my_env,
intern = TRUE)
params <- get_args_man(alg = "qgis:polygoncentroids",
qgis_env = my_env)
params
dir_tmp
# attach packages
library("raster")
library("rgdal")
# define path to a temporary folder
dir_tmp <- tempdir()
# download German administrative areas
ger <- getData(name = "GADM", country = "DEU", level = 1)
# save ger as a shapefile in our temporary folder
writeOGR(ger, dir_tmp, "ger", driver = "ESRI Shapefile", overwrite_layer = TRUE)
dir_tmp
params$INPUT_LAYER  <- file.path(dir_tmp, "ger.shp")
params$OUTPUT_LAYER <- file.path(dir_tmp, "ger_coords.shp")
run_qgis(alg = "qgis:polygoncentroids",
params = params,
qgis_env = my_env)
ger_coords <- readOGR(dsn = dir_tmp, layer = "ger_coords", verbose = FALSE)
run_qgis(alg = "qgis:polygoncentroids",
params = params,
qgis_env = my_env)
params
params$INPUT_LAYER  <- file.path(dir_tmp, "\ger.shp")
params$INPUT_LAYER  <- file.path(dir_tmp, "\\ger.shp")
params$OUTPUT_LAYER <- file.path(dir_tmp, "\\ger_coords.shp")
run_qgis(alg = "qgis:polygoncentroids",
params = params,
qgis_env = my_env)
params
params$INPUT_LAYER  <- file.path(dir_tmp, "ger.shp")
params$OUTPUT_LAYER <- file.path(dir_tmp, "ger_coords.shp")
params
run_qgis(alg = "qgis:polygoncentroids",
params = params,
qgis_env = my_env)
params
my_env <- set_env("C:/Program Files (x86)/QGIS Lyon")
my_env
my_env <- set_env("C:\\Program Files (x86)\\QGIS Lyon")
my_env
run_qgis(alg = "qgis:polygoncentroids",
params = params,
qgis_env = my_env)
?run_qgis
run_qgis(alg = "qgis:polygoncentroids",
params = params, check_params = TRUE,
qgis_env = my_env)
ger_coords <- readOGR(dsn = dir_tmp, layer = "ger_coords", verbose = FALSE)
plot(ger)
plot(ger_coords, pch = 21, add = TRUE, bg = "lightblue", col = "black")
debug(run_qgis)
debug(run_qgis)
n
n
n
undebug(run_qgis)
print(debug(run_qgis))
undebug(run_qgis)
help(RQGIS)
??RQGiS
check_apps("C:/OSGeo4W64")
check_apps("C:/OSGeo4W64")
RQGIS::check_apps("C:/OSGeo4W64")
build_py()
run_qgis()
run_qgis(null, null)
run_qgis(NULL, NULL)
get_options(alg = "saga:slopeaspectcurvature")
RQGIS::check_apps("C:/OSGeo4W64")
check_apps("C:/OSGeo4W64")
plot(ger_coords, pch = 21, add = TRUE, bg = "lightblue", col = "black")
?run_qgisfit <- aov(y ~ A, data=mydataframe)
fit <- aov(y ~ A, data=mydataframe)
iris
fit <- aov(y ~ A, data=iris)
boxplot(Layer[[X]])
Layer <- readOGR("F:\backup from laptop\data\data for geospatial python\Crime\", layer="Crime.shp )
Layer <- readOGR("F:\\backup from laptop\\data\\data for geospatial python\\Crime\\", layer="Crime.shp )
library(raster)
library(rgdal)
Layer <- readOGR("F:\\backup from laptop\\data\\data for geospatial python\\Crime\\", layer="Crime" )
Layer <- readOGR("F:/backup from laptop/data/data for geospatial python/Crime/", layer="Crime" )
require(rgdal)
Layer <- readOGR("F:/backup from laptop/data/data for geospatial python/Crime/", layer="Crime" )
Layer <- readOGR(dns="F:/backup from laptop/data/data for geospatial python/Crime/", layer="Crime" )
Layer <- readOGR(dsn="F:/backup from laptop/data/data for geospatial python/Crime/", layer="Crime" )
Layer <- readOGR(dns="F:/backup from laptop/data/data for geospatial python/Crime", layer="Crime" )
Layer <- readOGR(dsn="F:/backup from laptop/data/data for geospatial python/Crime", layer="Crime" )
Field = "CCA_1"
Summary_statistics
length(Layer[[Field]]), length(unique(Layer[[Filed]])), min(Layer[[Field]]),
length(Layer[[Field]])
Field
Layer
Field = "OFFENSE"
length(Layer[[Field]])
length(Layer[[Field]]), length(unique(Layer[[Filed]])), min(Layer[[Field]])
length(unique(Layer[[Field]]))
min(Layer[[Field]])
mean(Layer[[Field]])
median(Layer[[Field]])
sd(Layer[[Field]])
plot(Layer)
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap")
install.packages(x)
install.packages(x)
library(rgdal)
lnd <- readOGR(dsn = "data", layer = "london_sport")
lnd <- readOGR(dsn = "data", layer = "london_sport")
setwd("F:/backup from laptop/data/data for geospatial python/Creating-maps-in-R")
lnd <- readOGR(dsn = "data", layer = "london_sport")
head(lnd@data, n = 2)
head(Layer@data, n = 2)
mean(lnd$Partic_Per)
head(lnd@polygons[[1]]@Polygons[[1]]@coords,3)
lnd@polygons[[1]]@Polygons[[1]]@coords
plot(lnd@polygons[[1]]@Polygons[[1]]@coords)
nrow(lnd)
ncol(lnd)
lnd@polygons[[1]]@Polygons[[1]]@coords
plot(lnd)
plot(lnd@data)
lnd@data[lnd$Partic_Per < 15, ]
lnd@data[1:2, 1:3]
sel <- lnd$Partic_Per > 20 & lnd$Partic_Per < 25
plot(lnd[sel, ])
head(sel)
plot(lnd, col = "lightgrey")
sel <- lnd$Partic_Per > 25
plot(lnd[ sel, ], col = "turquoise", add = TRUE)
print(lnd)
names(lnd)
summary(lnd)
library(knitr)
install.packages("knitr")
library(methods)
options(replace.assign=FALSE, width=80)
opts_chunk$set(fig.path='knitr_figure/graphics-',
cache.path='knitr_cache/graphics-',
dev='pdf', fig.width=4, fig.height=3,
fig.show='hold', cache=FALSE, par=TRUE)
proj4string(lnd) <- NA_character_
proj4string(lnd) <- CRS("+init=epsg:4326")
proj4string(lnd) <- CRS("+init=epsg:27700")
plot(ln d)
plot(lnd)
lnd84 <- spTransform(lnd, CRS("+init=epsg:4326"))
lnd84
plot(lnd)
lnd@polygons[[1]]@Polygons[[1]]@coords
lnd84@polygons[[1]]@Polygons[[1]]@coords
saveRDS(object = lnd84, file = "data/lnd84.Rds")
rm(lnd84)
crime_data <- read.csv("data/mps-recordedcrime-borough.csv",
stringsAsFactors = FALSE)
crime_data
head(crime_data, 3)
head(crime_data$CrimeType)
crime_theft <- crime_data[crime_data$CrimeType == "Theft & Handling", ]
head(crime_theft, 2)
crime_ag <- aggregate(CrimeCount ~ Borough, FUN = sum, data = crime_theft)
crime_ag
lnd$name %in% crime_ag$Borough
lnd$name[!lnd$name %in% crime_ag$Borough]
?left_join
library(dplyr)
install.packages("dplyr")
?left_join
head(lnd$name)
head(crime_ag$Borough)
crime_ag <- rename(crime_ag, name = Borough)
library("plyr")
crime_ag <- rename(crime_ag, name = Borough)
crime_ag <- rename(crime_ag, name = "Borough")
lnd@data <- left_join(lnd@data, crime_ag)
library(tmap)
qtm(lnd, "CrimeCount")
qtm(shp = lnd, fill = "Partic_Per", fill.palette = "-Blues")
qtm(shp = lnd, fill = c("Partic_Per", "Pop_2001"), fill.palette = c("Blues"), ncol = 2)
tm_shape(lnd) +
tm_fill("Pop_2001", thres.poly = 0) +
tm_facets("name", free.coords=TRUE, drop.shapes=TRUE) +
tm_layout(legend.show = FALSE, title.position = c("center", "center"), title.size = 20)
p <- ggplot(lnd@data, aes(Partic_Per, Pop_2001))
library(ggplot)
install.packages("ggplot")
library(ggplot)
library(ggplot2)
p <- ggplot(lnd@data, aes(Partic_Per, Pop_2001))
plot(p)
p + geom_point()
p + geom_point(aes(colour=Partic_Per, size=Pop_2001))
p + geom_point(aes(colour = Partic_Per, size = Pop_2001)) +
geom_text(size = 2, aes(label = name))
lnd_f <- fortify(lnd)
head(lnd_f, n = 2)
lnd$id <- row.names(lnd)
head(lnd@data, n = 2)
lnd_f <- left_join(lnd_f, lnd@data)
install.packages("dplyr")
library("dplyr")
lnd_f <- left_join(lnd_f, lnd@data)
lnd_f[1:2, 1:8]
map <- ggplot(lnd_f, aes(long, lat, group = group, fill = Partic_Per)) +
geom_polygon() +
coord_equal() +
labs(x = "Easting (m)", y = "Northing (m)",
fill = "% Sports\nParticipation") +
ggtitle("London Sports Participation")
map + scale_fill_gradient(low = "white", high = "black")
ggsave("large_plot.png", scale = 3, dpi = 400)
library(ggmap)
lnd84 <- readRDS("data/lnd84.Rds")
bb <- bbox(lnd84)
b <- (bb - rowMeans(bb)) * 1.05 + rowMeans(bb)
lnd_b1 <- ggmap(get_map(location = b))
lnd_wgs84_f <- fortify(lnd84, region = "ons_label")
lnd_wgs84_f <- left_join(lnd_wgs84_f, lnd84@data,
by = c("id" = "ons_label"))
lnd_wgs84_f <- fortify(lnd84, region = "ons_label")
library(rgeos)
lnd_wgs84_f <- fortify(lnd84, region = "ons_label")
install.packages("rgeos")
library("rgeos")
lnd_wgs84_f <- fortify(lnd84, region = "ons_label")
lnd_wgs84_f <- ggplot2::fortify(lnd84, region = "ons_label")
library(maptools)
lnd_wgs84_f <- ggplot2::fortify(lnd84, region = "ons_label")
lnd_wgs84_f <- left_join(lnd_wgs84_f, lnd84@data,
by = c("id" = "ons_label"))
library("dplyr")
lnd_wgs84_f <- left_join(lnd_wgs84_f, lnd84@data,
by = c("id" = "ons_label"))
lnd_b1 +
geom_polygon(data = lnd_wgs84_f,
aes(x = long, y = lat, group = group, fill = Partic_Per),
alpha = 0.5)
lnd_b1 +
geom_polygon(data = lnd_wgs84_f,
aes(x = long, y = lat, group = group, fill = Partic_Per),
alpha = 0.5)
lnd_b2 <- ggmap(get_map(location = b, source = "stamen",
maptype = "toner", crop = TRUE))
library(mapproj)
lnd_b2 +
geom_polygon(data = lnd_wgs84_f,
aes(x = long, y = lat, group = group, fill = Partic_Per),
alpha = 0.5)
summary(Layer@data)
summary(Layer[1:5,]@data)
summary(Layer[,1:5]@data)
summary(Layer[,2]@data)
summary(Layer[,3]@data)
library(png)
library(grid)
grid.raster(readPNG("figure/plot1.png"))
library(rgeos)
plot(lnd, col = "grey")
cent_lnd <- gCentroid(lnd[lnd$name == "City of London",])
points(cent_lnd, cex = 3)
library(rgeos)
plot(lnd, col = "grey")
cent_lnd <- gCentroid(lnd[lnd$name == "City of London",])
points(cent_lnd, cex = 3)
library(purrr)
install.packages("purrr")
library(purrr)
pkgs = c("rvest", "geojsonio", "tmap", "dplyr",
"stringdist")
pkgs
walk(pkgs, library, character.only = T)
install.packages("rvest")
pkgs = c("rvest", "geojsonio", "tmap", "dplyr",
"stringdist")
walk(pkgs, library, character.only = T)
install.packages("geojsonio")
walk(pkgs, library, character.only = T)
install.packages("stringdist")
walk(pkgs, library, character.only = T)
URL = "https://github.com/npct/pct-bigdata/raw/master/las-dbands.geojson"
fil = "las.geojson"
if (!file.exists(fil)) download.file(URL, fil)
las = geojson_read(fil, what = "sp")
URL = "http://www.bbc.co.uk/news/politics/eu_referendum/results/local/a"
bbc = read_html(URL)
URL = "http://www.bbc.co.uk/news/politics/eu_referendum/results/local/a"
bbc = read_html(URL)
bbc = read_html(URL)
URL
bbc = read_html(URL)
library(httr)
library(rvest)
bbc = read_html(URL)
bbc = html(URL)
bbc = read_html(URL)
curl(URL)
library(curl)
curl(URL)
curl(URL) %>% read_html()
curl(URL) %>% read_html()
curl(URL)
library(curl)
curl(URL)
curl(URL) %>% read_html()
bbc = read_html(URL)
URL
bbc = read_html(URL)
bbc = html(URL)
bbc = html(URL)
library(purrr)
pkgs = c("rvest", "geojsonio", "tmap", "dplyr",
walk(pkgs, library, character.only = T)
URL = "https://github.com/npct/pct-bigdata/raw/master/las-dbands.geojson"
pkgs = c("rvest", "geojsonio", "tmap", "dplyr",
"stringdist")
walk(pkgs, library, character.only = T)
URL = "https://github.com/npct/pct-bigdata/raw/master/las-dbands.geojson"
fil = "las.geojson"
if (!file.exists(fil)) download.file(URL, fil)
las = geojson_read(fil, what = "sp")
URL = "http://www.bbc.co.uk/news/politics/eu_referendum/results/local/a"
bbc = read_html(URL)
library(sp)
library(raster)
load("../data/lnd.RData")
slotNames(lnd)
lnd@bbox
lnd@polygons[[1]]@Polygons[[1]]@coords[1:5,]
plot(lnd@polygons[[1]]@Polygons[[1]]@coords)
head(lnd@data[1:2,1:3])
lnd5 = lnd[5,]
plot(lnd5)
class(lnd)
class(lnd5)
nrow(lnd)
nrow(lnd5)
sel = lnd$Pop_2001 > median(lnd$Pop_2001)
lnd_highpop = lnd[sel,]
plot(lnd_highpop)
plot(lnd)
plot(lnd_highpop, add = TRUE, col = "red")
library(tmap)
lnd$colour = "white"
lnd$colour[sel] = "black"
qtm(lnd, fill = "colour")
```{r}
sel = lnd$Pop_2001 > median(lnd$Pop_2001)
lnd_highpop = lnd[sel,]
plot(lnd_highpop)
```
## Adding together different selections
```{r}
plot(lnd)
plot(lnd_highpop, add = TRUE, col = "red")
```
Note: it would be better to do this with **tmap**.
## Illustration with tmap
```{r}
library(tmap)
lnd$colour = "white"
lnd$colour[sel] = "black"
qtm(lnd, fill = "colour")
```
# Loading, plotting and interrogating spatial data | Pages 8 - 10
## Transformations
```{r}
lnd = raster::shapefile("../data/lnd-stns.shp")
proj4string(lnd)
bbox(lnd)
lnd_osgb = spTransform(lnd, CRSobj = "+init=epsg:27700")
bbox(lnd_osgb)
```
# Manipulating spatial objects | Pages 11 - 17
head(Layer@data, n = 2)
plot(Layer@data)
plot(Layer@data)
---
output: pdf_document
bibliography: r4bd.bib
---
```{r echo=FALSE}
library("grid")
library("png")
library("Rcpp")
library("pryr")
install.packages("pryr")
library("bigvis")
install.packages("bigvis")
grid.raster(readPNG("figures//746px-Pistol-grip_drill.svg.png"))
```{r drill, fig.margin=TRUE, fig.cap= "A drill is analogous to a software tool: the questions of functionality and reliability should trump the question: 'is it the best?'", echo=FALSE}
grid.raster(readPNG("figures//746px-Pistol-grip_drill.svg.png"))
```
d = dist(USArrests)
d
fit = hclust(d)
fit
```{r denofig.fullwidth=TRUE, fig.height=2, echo=2, fig.cap="Dendrogram from USArrests data."}
par(mar=c(3,3,2,1), mgp=c(2,0.4,0), tck=-.01,cex=0.5, las=1)
plot(fit, labels=rownames(d))
```
par(mar=c(3,3,2,1), mgp=c(2,0.4,0), tck=-.01,cex=0.5, las=1)
plot(fit, labels=rownames(d))
\noindent When we inspect the object size of the original data set and the distance object
```{r}
pryr::object_size(USArrests)
pryr::object_size(d)
install.packages("drat")
drat::addRepo("rcourses")
install.packages("r4bd")
